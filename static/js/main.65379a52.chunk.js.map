{"version":3,"sources":["components/Browser.js","components/Navbar.js","components/Profile.js","components/Cols.js","components/Feed.js","components/Box.js","App.js","serviceWorker.js","index.js"],"names":["Browser","_ref","children","react_default","a","createElement","className","style","background","type","value","readOnly","Navbar","_ref$leftItems","leftItems","_ref$rightItems","rightItems","map","_","index","key","concat","Profile","Col","_ref$size","size","flex","Cols","_ref2","display","Feed","_useSocket","useSocket","nextFeed","Object","slicedToArray","_useState","useState","_useState2","feeds","setFeeds","useEffect","length","toConsumableArray","slice","textAlign","backgroundColor","feed","id","Cols_Cols","Cols_Col","alt","src","user","profile_image_url","name","screen_name","text","Box","items","App","lib","url","Browser_Browser","Navbar_Navbar","Profile_Profile","Box_Box","Feed_Feed","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"yUAGaA,SAAU,SAAAC,GAAA,IAAGC,EAAHD,EAAGC,SAAH,OACrBC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kBACbH,EAAAC,EAAAC,cAAA,QAAMC,UAAU,cAAcC,MAAO,CAAEC,WAAY,aACnDL,EAAAC,EAAAC,cAAA,QAAMC,UAAU,cAAcC,MAAO,CAAEC,WAAY,aACnDL,EAAAC,EAAAC,cAAA,QAAMC,UAAU,cAAcC,MAAO,CAAEC,WAAY,cAErDL,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iCACbH,EAAAC,EAAAC,cAAA,SACEI,KAAK,OACLC,MAAM,uBACNC,UAAQ,EACRL,UAAU,mBAGdH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kBACbH,EAAAC,EAAAC,cAAA,QAAMC,UAAU,gBAChBH,EAAAC,EAAAC,cAAA,QAAMC,UAAU,gBAChBH,EAAAC,EAAAC,cAAA,QAAMC,UAAU,kBAIpBH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mBAAmBJ,MCvBzBU,SAAS,SAAAX,GAAA,IAAAY,EAAAZ,EAAGa,iBAAH,IAAAD,EAAe,GAAfA,EAAAE,EAAAd,EAAmBe,kBAAnB,IAAAD,EAAgC,GAAhCA,EAAA,OACpBZ,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eACZQ,EAAUG,IAAI,SAACC,EAAGC,GAAJ,OACbhB,EAAAC,EAAAC,cAAA,OAAKe,IAAG,QAAAC,OAAUF,GAASb,UAAU,mBAIzCH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gBACZU,EAAWC,IAAI,SAACC,EAAGC,GAAJ,OACdhB,EAAAC,EAAAC,cAAA,OAAKe,IAAG,SAAAC,OAAWF,GAASb,UAAU,sBCVjCgB,SAAU,kBACrBnB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mBACfH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,sBCJNiB,EAAM,SAAAtB,GAAA,IAAAuB,EAAAvB,EAAGwB,YAAH,IAAAD,EAAU,EAAVA,EAAatB,EAAbD,EAAaC,SAAb,OACjBC,EAAAC,EAAAC,cAAA,OAAKE,MAAO,CAAEmB,KAAMD,IAASvB,IAGlByB,EAAO,SAAAC,GAAA,IAAG1B,EAAH0B,EAAG1B,SAAH,OAClBC,EAAAC,EAAAC,cAAA,OAAKE,MAAO,CAAEsB,QAAS,SAAW3B,oBCDvB4B,SAAO,WAAM,IAAAC,EACLC,oBAAU,SAAtBC,EADiBC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,MAAAK,EAEEC,mBAAS,IAFXC,EAAAJ,OAAAC,EAAA,EAAAD,CAAAE,EAAA,GAEjBG,EAFiBD,EAAA,GAEVE,EAFUF,EAAA,GAiBxB,OAbAG,oBACE,WACE,GAAIR,EACF,OAAqB,IAAjBM,EAAMG,OACDF,EAAQ,CAAEP,GAAFZ,OAAAa,OAAAS,EAAA,EAAAT,CAAeK,EAAMK,MAAM,EAAGL,EAAMG,OAAS,MAGvDF,EAAQ,CAAEP,GAAFZ,OAAAa,OAAAS,EAAA,EAAAT,CAAeK,MAGlC,CAACN,IAID9B,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SACbiC,EAAMG,QAAUvC,EAAAC,EAAAC,cAAA,OAAKE,MAAO,CAACsC,UAAW,SAAUC,gBAAiB,YAAnD,yBACfP,EAAMtB,IAAI,SAAA8B,GAAI,OACb5C,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YAAYc,IAAK2B,EAAKC,IACnC7C,EAAAC,EAAAC,cAAC4C,EAAD,KACE9C,EAAAC,EAAAC,cAAC6C,EAAD,KACE/C,EAAAC,EAAAC,cAAA,OACE8C,IAAI,UACJC,IAAKL,EAAKM,KAAKC,kBACfhD,UAAU,iBAGdH,EAAAC,EAAAC,cAAC6C,EAAD,CAAKzB,KAAM,GACTtB,EAAAC,EAAAC,cAAA,QAAMC,UAAU,eAAeyC,EAAKM,KAAKE,MACzCpD,EAAAC,EAAAC,cAAA,QAAMC,UAAU,mBAAhB,MACMyC,EAAKM,KAAKG,aAEhBrD,EAAAC,EAAAC,cAAA,SAAI0C,EAAKU,cCtCVC,SAAM,kBACjBvD,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBCIbqD,EAAQ,CAAC,EAAG,EAAG,GAwBNC,EAtBI,kBACjBzD,EAAAC,EAAAC,cAACwD,EAAA,aAAD,CAAcC,IAAI,yCAChB3D,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAAC0D,EAAD,KACE5D,EAAAC,EAAAC,cAAC2D,EAAD,CAAQlD,UAAW6C,EAAO3C,WAAY2C,IACtCxD,EAAAC,EAAAC,cAAC4C,EAAD,KACE9C,EAAAC,EAAAC,cAAC6C,EAAD,KACE/C,EAAAC,EAAAC,cAAC4D,EAAD,MACA9D,EAAAC,EAAAC,cAAC6D,EAAD,OAEF/D,EAAAC,EAAAC,cAAC6C,EAAD,CAAKzB,KAAM,GACTtB,EAAAC,EAAAC,cAAC8D,EAAD,OAEFhE,EAAAC,EAAAC,cAAC6C,EAAD,KACE/C,EAAAC,EAAAC,cAAC6D,EAAD,YCbQE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOvE,EAAAC,EAAAC,cAACsE,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.65379a52.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./Browser.css\";\n\nexport const Browser = ({ children }) => (\n  <div className=\"browser\">\n    <div className=\"browser-row\">\n      <div className=\"browser-column\">\n        <span className=\"browser-dot\" style={{ background: \"#ED594A\" }} />\n        <span className=\"browser-dot\" style={{ background: \"#FDD800\" }} />\n        <span className=\"browser-dot\" style={{ background: \"#5AC05A\" }} />\n      </div>\n      <div className=\"browser-column browser-middle\">\n        <input\n          type=\"text\"\n          value=\"https://twitter.com/\"\n          readOnly\n          className=\"browser-input\"\n        />\n      </div>\n      <div className=\"browser-column\">\n        <span className=\"browser-bar\" />\n        <span className=\"browser-bar\" />\n        <span className=\"browser-bar\" />\n      </div>\n    </div>\n\n    <div className=\"browser-content\">{children}</div>\n  </div>\n);\n","import React from \"react\";\nimport \"./Navbar.css\";\n\nexport const Navbar = ({ leftItems = [], rightItems = [] }) => (\n  <div className=\"navbar\">\n    <div className=\"navbar-left\">\n      {leftItems.map((_, index) => (\n        <div key={`left-${index}`} className=\"navbar-item\" />\n      ))}\n    </div>\n\n    <div className=\"navbar-right\">\n      {rightItems.map((_, index) => (\n        <div key={`right-${index}`} className=\"navbar-item\" />\n      ))}\n    </div>\n  </div>\n);\n","import React from \"react\";\nimport \"./Profile.css\";\n\nexport const Profile = () => (\n  <div className=\"profile\">\n    <div className=\"profile-banner\" />\n    <div className=\"profile-avatar\" />\n  </div>\n);\n","import React from \"react\";\n\nexport const Col = ({ size = 1, children }) => (\n  <div style={{ flex: size }}>{children}</div>\n);\n\nexport const Cols = ({ children }) => (\n  <div style={{ display: \"flex\" }}>{children}</div>\n);\n","import React, { useState, useEffect } from \"react\";\nimport { useSocket } from \"use-socket\";\nimport { Cols, Col } from \"./Cols\";\n\nimport \"./Feed.css\";\n\nexport const Feed = () => {\n  const [nextFeed] = useSocket(\"tweet\");\n  const [feeds, setFeeds] = useState([]);\n\n  useEffect(\n    () => {\n      if (nextFeed) {\n        if (feeds.length === 5) {\n          return setFeeds([nextFeed, ...feeds.slice(0, feeds.length - 1)]);\n        }\n\n        return setFeeds([nextFeed, ...feeds]);\n      }\n    },\n    [nextFeed]\n  );\n\n  return (\n    <div className=\"feed\">\n    {!feeds.length && <div style={{textAlign: 'center', backgroundColor: '#efefef'}}>Waiting for tweets...</div>}\n      {feeds.map(feed => (\n        <div className=\"feed-item\" key={feed.id}>\n          <Cols>\n            <Col>\n              <img\n                alt=\"Twitter\"\n                src={feed.user.profile_image_url}\n                className=\"feed-avatar\"\n              />\n            </Col>\n            <Col size={9}>\n              <span className=\"feed-author\">{feed.user.name}</span>\n              <span className=\"feed-authorname\">\n                - @{feed.user.screen_name}\n              </span>\n              <p>{feed.text}</p>\n            </Col>\n          </Cols>\n        </div>\n      ))}\n    </div>\n  );\n};\n","import React from \"react\";\nimport \"./Box.css\";\n\nexport const Box = () => (\n  <div className=\"box\">\n    <div className=\"box-title\" />\n  </div>\n);\n","import React from \"react\";\nimport { ClientSocket } from \"use-socket\";\nimport { Browser } from \"./components/Browser\";\nimport { Navbar } from \"./components/Navbar\";\nimport { Profile } from \"./components/Profile\";\nimport { Cols, Col } from \"./components/Cols\";\nimport { Feed } from \"./components/Feed\";\nimport { Box } from \"./components/Box\";\n\nconst items = [1, 2, 3];\n\nexport const App = () => (\n  <ClientSocket url=\"https://socket-io-tweet-stream.now.sh\">\n    <div className=\"container\">\n      <Browser>\n        <Navbar leftItems={items} rightItems={items} />\n        <Cols>\n          <Col>\n            <Profile />\n            <Box />\n          </Col>\n          <Col size={3}>\n            <Feed />\n          </Col>\n          <Col>\n            <Box />\n          </Col>\n        </Cols>\n      </Browser>\n    </div>\n  </ClientSocket>\n);\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}